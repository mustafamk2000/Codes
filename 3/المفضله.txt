
  long time;
    int I1;
    ListView list;
    ArrayList<String> listIndex = new ArrayList<String>();
    ArrayList<list_item> List_Favorite = new ArrayList<list_item>();
    TextView textView_Title;
    ArrayAdapter<String> arrayAdapter;
    String List_Type;
    View v;
    sqlite db = new sqlite(this);
    LinearLayout line;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_the_stories);
        list = (ListView) findViewById(R.id.list);
        textView_Title = (TextView) findViewById(R.id.Ti);
        line=(LinearLayout) findViewById(R.id.back_tow);
        registerForContextMenu(list);
        list_index();
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
                 this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.setDrawerListener(toggle);
        toggle.syncState();
        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);
    }
    public  void favv(){
        List_Type = "Favorite";
        textView_Title.setText("«·„›÷·Â");
        List_Favorite = db.get_All_Favorite();
        if (List_Favorite.size() == 0) {
            Intent I = new Intent(the_stories.this,favorite.class);
            startActivity(I);
            Toast T = Toast.makeText(this,"⁄›Ê« «·„›÷·Â ›«—€Â",Toast.LENGTH_SHORT);
            View V =T.getView();
            V.setBackgroundColor(Color.parseColor("#00e676"));
            T.show();
            list_index();
        } else {
            listIndex.clear();
            for (int i = 0; i < List_Favorite.size(); i++) {
                listIndex.add(List_Favorite.get(i).getMain_Title());//Ì«Œ– «·⁄‰Ê«‰ ›ﬁÿ
            }
            arrayAdapter = new ArrayAdapter<String>(this, R.layout.activity_row, R.id.list_text, listIndex);
            list.setAdapter(arrayAdapter);
        }
    }
    public void list_index() {
        listIndex.clear();
        List_Type = "Index";
        textView_Title.setText("ﬁ«∆„Â «·ﬁ’’");
        try {
            InputStream input = getAssets().open("index.txt");
            InputStreamReader rd = new InputStreamReader(input);
            BufferedReader br = new BufferedReader(rd);
            String line;
            while ((line = br.readLine()) != null) {
                listIndex.add(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        arrayAdapter = new ArrayAdapter<String>(this, R.layout.activity_row, R.id.list_text, listIndex);
        list.setAdapter(arrayAdapter);

        list.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {

                I1=position;
                TextView Title = (TextView) view.findViewById(R.id.list_text);

                int PageNum = 0;

                if (List_Type.equals("Index")) {
                    PageNum = position;
                } else if (List_Type.equals("Favorite")) {
                    PageNum = List_Favorite.get(position).getPage_id();
                }

                Intent intent = new Intent(the_stories.this, the_story.class);
                intent.putExtra("pageNum", PageNum);
                intent.putExtra("Title", Title.getText());
                startActivity(intent);
                finish();
            }
        });
    }
    @Override
    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) {
        super.onCreateContextMenu(menu, v, menuInfo);
        if (List_Type.equals("Favorite")){
            menu.add("Õ–› «·ﬁ’Â „‰ «·„›÷·Â");
        }
    }
    @Override
    public boolean onContextItemSelected(MenuItem item) {
        super.onContextItemSelected(item);
        if(item.getTitle()=="Õ–› «·ﬁ’Â „‰ «·„›÷·Â"){
            int  id  = List_Favorite.get(I1).getId();
            String id2 = String.valueOf(id);
            db.Delete(id2);
            Toast T = Toast.makeText(this," „ «·Õ–›",Toast.LENGTH_SHORT);
            View V =T.getView();
            V.setBackgroundColor(Color.parseColor("#00e676"));
            T.show();
            favv();
            if(List_Favorite.size()==0){
                line.setVisibility(GONE);
                Intent I = new Intent(the_stories.this,favorite.class);
                startActivity(I);
                finish();
            }
        }
        return true;
    }
    public  void  back_me(View view){
        line.setVisibility(GONE);
        list_index();
    }
    @Override
    public void onBackPressed() {
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        if (drawer.isDrawerOpen(GravityCompat.START)) {
            drawer.closeDrawer(GravityCompat.START);
        }
        else  if(time+2000>System.currentTimeMillis()){
            super.onBackPressed();
        }
        else {

            Toast.makeText(the_stories.this,"√÷€ÿ „—… «Œ—Ï ··Œ—ÊÃ",Toast.LENGTH_LONG).show();
        }
        time=System.currentTimeMillis();
    }
    @RequiresApi(api = Build.VERSION_CODES.GINGERBREAD)
    @SuppressWarnings("StatementWithEmptyBody")
    @Override
    public boolean onNavigationItemSelected(MenuItem item) {
        // Handle navigation view item clicks here.
        int id = item.getItemId();
        if (id == R.id.favorite) {
            List_Type = "Favorite";
            textView_Title.setText("«·„›÷·Â");
            line.setVisibility(v.VISIBLE);
            List_Favorite = db.get_All_Favorite();
            if (List_Favorite.size() == 0) {
                line.setVisibility(GONE);
                Intent I = new Intent(the_stories.this,favorite.class);
                startActivity(I);
                finish();
                Toast T = Toast.makeText(this,"⁄›Ê« «·„›÷·Â ›«—€Â",Toast.LENGTH_SHORT);
                View V =T.getView();
                V.setBackgroundColor(Color.parseColor("#00e676"));
                T.show();
                list_index();
            } else {
                listIndex.clear();
                for (int i = 0; i < List_Favorite.size(); i++) {
                    listIndex.add(List_Favorite.get(i).getMain_Title());//Ì«Œ– «·⁄‰Ê«‰ ›ﬁÿ
                }
                arrayAdapter = new ArrayAdapter<String>(this, R.layout.activity_row, R.id.list_text, listIndex);
                list.setAdapter(arrayAdapter);
            }
        }
        else if (id == R.id.share) {
            String app = "ﬁ’’ ÊÕﬂ«Ì« ";
            Intent I = new Intent(Intent.ACTION_SEND);
            String share="kd";
            I.putExtra(Intent.EXTRA_TEXT,app+"\n"+share);
            startActivity(I);
        }
        else if (id==R.id.email){
            Intent send = new Intent(Intent.ACTION_SEND);
            send.setData(Uri.parse("mailto:"));
            String email = "mustafa.kakashe@gmail.com";
            send.putExtra(Intent.EXTRA_EMAIL,email);
            send.putExtra(Intent.EXTRA_SUBJECT,"⁄“Ì“Ì «·„” Œœ„ Ì„ﬂ‰ﬂ «—”«· «Ì «ﬁ —«Õ  ⁄»— «·»—Ìœ «·«·ﬂ —Ê‰Ì «·Œ«’ »‰« mustafa.kakashe@gmail.com");
            send.putExtra(Intent.EXTRA_TEXT,"");
            send.setType("message/rfc822");
            startActivity(Intent.createChooser(send,"«—”«· —”«·Â "));
        }
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }
}
------------------------------------------------------------------------------------------------
 public  void  fav(View view){

        AlertDialog.Builder b = new AlertDialog.Builder(this);
        b.setMessage("Â·  —Ìœ «÷«›Â Â–Â «·ﬁ’Â «·Ï «·„›÷·Â ");
        b.setIcon(android.R.drawable.stat_notify_error);
        b.setTitle("");
        b.setPositiveButton("‰⁄„", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int id) {

                int check = db_fav.get_check_List_Favorite(Title);
                if (check>0){
                    Toast.makeText(the_story.this, "⁄›Ê« «·ﬁ’Â „ÊÃÊœ ›Ì «·„›÷·…", Toast.LENGTH_LONG).show();
                }else{
                    db_fav.Insert_to_favorite(Title,pageNum);
                    Toast.makeText(the_story.this," „  «Ÿ«›Â «·ﬁ’Â «·Ï «·„›÷·Â", Toast.LENGTH_LONG).show();
                }
            }
        });
        b.setNegativeButton("·«",new DialogInterface.OnClickListener(){
            @Override
            public  void  onClick(DialogInterface dialog,int id){

            }

        }).show();


    }
--------------------------------------------------------
    public static final String BDname = "Favorite.db";

    public sqlite(Context context) {
        super(context, BDname, null, 1);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        db.execSQL("create table favorite ( id INTEGER PRIMARY KEY AUTOINCREMENT, Title TEXT,page_id INTEGER)");
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        db.execSQL("DROP TABLE IF EXISTS favorite");
        onCreate(db);
    }

    public Boolean Insert_to_favorite(String Title, int page_id) {
        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues contentValues = new ContentValues();
        contentValues.put("Title", Title);
        contentValues.put("page_id", page_id);
        long result = db.insert("favorite", null, contentValues);

        if (result == -1)
            return false;
        else
            return true;

    }


    public ArrayList get_All_Favorite() {
        ArrayList<list_item> arraylist = new ArrayList<>();
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor rs = db.rawQuery("select * from favorite", null);
        rs.moveToFirst();
        while (!rs.isAfterLast()) {
            int id = rs.getInt(rs.getColumnIndex("id"));
            String Title = rs.getString(rs.getColumnIndex("Title"));
            int page_id = rs.getInt(rs.getColumnIndex("page_id"));
            arraylist.add(new list_item(id,Title,page_id));
            rs.moveToNext();
        }
        return arraylist;
    }

    public int get_check_List_Favorite(String Title) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor rs = db.rawQuery("select * from favorite Where Title Like'" + Title + "'", null);
        int count = rs.getCount();
        return count;
    }

    public Integer Delete(String id) {
        SQLiteDatabase db = this.getWritableDatabase();
        return db.delete("favorite", "id = ?", new String[]{id});
    }
-----------------------------------------------------------------------
public class list_item {
    private int id;
    private String Main_Title;
    private int page_id;

    public list_item(int id, String main_Title, int page_id) {
        this.id = id;
        Main_Title = main_Title;
        this.page_id = page_id;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getMain_Title() {
        return Main_Title;
    }

    public void setMain_Title(String main_Title) {
        Main_Title = main_Title;
    }

    public int getPage_id() {
        return page_id;
    }

    public void setPage_id(int page_id) {
        this.page_id = page_id;
    }
}
